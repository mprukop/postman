// --------------------------------------------
// ---- Codes used for specific scenarios: ----
// --------------------------------------------

// Using test cases from json file
// json with data:
[
    {
        "test": "1",
        "tCase": "",
        "valid": "false"
    },
    {
        "test": "2",
        "tCase": "!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~",
        "valid": "false"
    },
    {
        "test": "3",
        "tCase": "Mad",
        "valid": "true"
    }
]

// Pre-request:
pm.collectionVariables.set("testCase", pm.iterationData.get("tCase"));

// Tests:
pm.test("Status code "+testResult, () => {
    if (pm.iterationData.get("valid").includes("true")){
        pm.response.to.have.status(201);
    } else {
        pm.response.to.have.status(400);
    };
});


// Script for validation of schema
// Variable with schema:
containersSchema: {"type":"array","items":{"type":"object","properties":{"createdAt":{"type":"string"},"changedAt":{"type":"string"},"id":{"type":"integer"},"name":{"type":"string"},"status":{"type":"string"},"consumer":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"required":["id","name"]},"provider":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"required":["id","name"]},"locked":{"type":"boolean"},"deleted":{"type":"boolean"},"forApproval":{"type":"boolean"},"category":{"type":"object","properties":{"type":{"type":"string"}},"required":["type"]},"newestIndexFile":{"type":"object","properties":{"id":{"type":"integer"},"uploadDate":{"type":"string"},"originalFile":{"type":"object","properties":{"name":{"type":"string"}},"required":["name"]},"uploadedBy":{"type":"object","properties":{"personData":{"type":"object","properties":{"completeName":{"type":"string"}},"required":["completeName"]}},"required":["personData"]}},"required":["id","uploadDate","originalFile","uploadedBy"]}},"required":["createdAt","id","name","consumer","locked","deleted","forApproval","category"]}}

// Test for schema:
const Ajv = require("ajv");
const ajv = new Ajv();
const schemA = JSON.parse(pm.collectionVariables.get("containersSchema"));
if (pm.response.code === 200) {
    pm.test("Structure OK", () => {
        pm.expect(ajv.validate(schemA,pm.response.json())).to.be.true;
    });
};

// --------------------------------------------
// --- Code for Pre-request Script section: ---
// --------------------------------------------

// ----- Check typeof variable
if (typeof pm.iterationData.get("tCase") != "undefined") {
    pm.collectionVariables.set("testCase", pm.iterationData.get("tCase"));
} else {
    pm.collectionVariables.set("testCase", ""+i+"@domain.com");
}

// ----- Check if variable exist
if (pm.collectionVariables.has('iterationDate')) {
    iterationDate = pm.collectionVariables.get('iterationDate');
} else {
    iterationDate = startDate;
    pm.collectionVariables.set('iterationDate', iterationDate);
};

// ----- Prepare query for solR, check if variable exist
if (pm.iterationData.has("testCase")) {
    pm.collectionVariables.set("query", pm.iterationData.get("testCase"))
    let testQ = String(pm.iterationData.get("testCase"));
    var q = "";
    var qException = "";
    if (testQ.includes(" ")) {
        q = "(\\\"" + testQ.replaceAll(" ", "\\\\+") + "\\\")^4+OR+(" + testQ.replaceAll(" ", "+AND+") + ")^2" + "+OR+(" + testQ.replaceAll(" ", "~1+AND+") + "~1)"
        qException = "(\"" + testQ.replaceAll(" ", "\\\"OR+\\\"") + "\")"
    } else {
        q = "(" + testQ + ")^3+OR+(" + testQ +"*)+OR+(" + testQ + "~1)"
        qException = "\\\"" + testQ + "\\\""
    }
    pm.collectionVariables.set("q", q )
    pm.collectionVariables.set("qException", qException )

} else {
    console.log("nooo :(");
}


// ----- Encoding parametar
if (pm.collectionVariables.get("testCase").includes(" ")) {
    pm.collectionVariables.set("testCase", encodeURIComponent(pm.iterationData.get("tCase")));
}


// --------------------------------------------
// --------- Code for Tests section: ----------
// --------------------------------------------

pm.test("Approval: "+pm.response.json().response.numFound, () => {
    pm.expect(pm.response.to.have.status(200));
    //pm.expect(pm.response.json().status).to.be.not.equal("ERROR");
});

pm.test("Request successfull", function () {
  pm.response.to.have.status(200);
  pm.response.to.be.not.withBody;
});

var testResult = pm.response.code;
pm.test("Status code " + testResult, () => {
    pm.response.to.have.status(200);
    pm.expect(pm.response.json().success).to.be.equal(false);
});

pm.test("Status code "+testResult, () => {
    if (typeof pm.iterationData.get("validFor") != "undefined") {
        if (pm.iterationData.get("validFor").includes("true")){
            pm.response.to.have.status(201);
        } else {
            pm.response.to.have.status(400);
        };
    } else {
        pm.response.to.have.status(201);
    }
});

pm.test("Response time: " +pm.response.responseTime);
pm.test("Qtime: " +pm.response.json().responseHeader.QTime);
pm.test("NODE: " + solrNode) ;
pm.test("numFound: " +pm.response.json().response.numFound);

pm.test("CORE TEST: Change catalog value", () => {
    switch (pm.iterationData.get("test")) {
        case 'valid':
            pm.response.to.have.status(pm.iterationData.get("status"));
            pm.expect(pm.response.json().success).to.be.equal(true);
            break;
        case 'invalid':
            pm.response.to.have.status(pm.iterationData.get("status"));
            pm.expect(pm.response.json().code).to.be.equal("401");
            break;
        case 'error':
            pm.response.to.have.status(pm.iterationData.get("status"));
            pm.expect(pm.response.headers.get('Content-Type')).to.include('text/html');
            break;
        /*default:
            pm.expect(pm.response.code).to.be.equal(404);
            break;*/
    } 
});




